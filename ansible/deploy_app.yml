- hosts: containerdKubernetes
  tasks:

    #########################################
    #                                       #
    #         Copy k8s configuration        #
    #                                       #
    ######################################### 
    - name: Copy k8s files
      copy:
        src: ../kubernetes
        dest: /home/k8s-deployer/{{projectName}}
        owner: k8s-deployer
        group: k8s-deployer
        mode: '0644'

    #########################################
    #                                       #
    #        Clear failed deployment        #
    #                                       #
    #########################################

    # variable pathProject
    - name: get project dir
      command : /bin/sh -c "ls ~/sifast-kubernetes/mnt/nfs-vol-{{projectName}} |grep -w {{projectName}}-{{env}}"
      register: pathProject
      ignore_errors: yes

    # check if exist failed deployment
    - name: check if exist failed deployment
      command: /bin/sh -c "helm ls --failed | awk '{print $1 }' |grep -w {{projectName}}-{{env}}"
      register: failedDeployment
      ignore_errors: yes

    # delete failed deployment
    - name:  print msg
      shell: echo -e "HEKETI:\n Le deploiement {{projectName}} est en erreur \n Supression du deploiement {{projectName}}-{{env}}"
      when: failedDeployment is succeeded
    - name:  delete failed deployment
      command: /bin/sh -c "helm delete {{projectName}}-{{env}}"
      when:  failedDeployment is succeeded

    #########################################
    #                                       #
    #     Create namespace if not exist     #
    #                                       #
    #########################################
    
    # check namespace existance
    - name: check namespace existance
      command: /bin/sh -c "kubectl get namespace | grep -w  {{projectName}}"
      register: namespace
      ignore_errors: yes

    # create namespace if not exist
    - name: create namespace if not exist
      command: /bin/sh -c "kubectl create namespace {{projectName}}"
      when:  namespace is failed

    #########################################
    #                                       #
    #           deploy K8S objet            #
    #                                       #
    #########################################

    # check deployment existance
    - name: check deployment existance
      command: /bin/sh -c "helm ls | awk '{print $1 }' |grep -w {{projectName}}-{{env}}"
      register: deployment
      ignore_errors: yes
    - name:  deployment existe
      shell: echo -e "HELM:\n Le deploiement {{projectName}} existe déjà "
      when: deployment is succeeded

    # check k8s-secret existance
    - name: get secret
      command: /bin/sh -c "kubectl get secrets -n {{projectName}} | grep -w docker-credentials-{{projectName}}-{{env}}"
      register: secret
      ignore_errors: yes

    # add secret to pull container image from nexus
    - name:  print secret creation 
      shell: echo -e " create secret "
      when:  deployment is failed and secret is failed

    - name:  add secret to pull container image from nexus
      command: /bin/sh -c "kubectl create secret docker-registry 'docker-credentials-'{{projectName}}'-'{{env}} --docker-server=nexus.sifast.com:8087 --docker-username=docker --docker-password=sifast2017 -n {{projectName}}"
      when:  deployment is failed and secret is failed
      ignore_errors: yes
      
    - name: "print deployment initialisation msg "
      debug:
        msg: "HELM: Initialisation de l'environnment {{projectName}}"
      when:  deployment is failed

    # deploy application in k8s cluster
    - name:  print deployment initialisation msg
      shell: echo -e "HELM:\n Initialisation de l'environnment {{projectName}} "

    - name:  deploy application in k8s cluster
      command: /bin/sh -c "cd ~/{{projectName}}/kubernetes/ && helm install {{projectName}}-{{env}} {{projectName}} --values ./{{projectName}}/values-{{env}}.yaml"
      when:  deployment is failed

    # Clear K8S deployment files
    - name: delete project
      file:
        path: /home/k8s-deployer/{{projectName}}
        state: absent
